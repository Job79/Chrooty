#!/bin/sh
help() { printf "chrooty v2.0; chroot manager

USAGE
	chrooty command [args...]

COMMANDS
	pull [url<:name>]			download image from repository
	images					list local images
	rmimage [images...]			remove local image

	create [chroot] [image]			create new chroot fom image
	run [chroot] [<command>] [<args>...]	run chroot
	chroots					list local chroots
	rmchroot [chroots...]			remove local chroot
	export [chroot] [<image>]		export chroot to image
"; }

err() { echo "ERROR; $@"; exit 1; }
pull() { wget "${1%:*}" -O "$images/$(echo "$1" | sed 's!.*/\|.*:!!').tar.gz"; }
images() { ls -1 "$images" | cut -f 1 -d '.'; }
rmimage() { for i in "$@"; do rm -f "$images/$i.tar.gz"; done; }

create() {
	chroot="$chroots/$1"; image="$images/$2.tar.gz"
	[ ! -f "$image" ] && err 'image does not exist'
	[ -d "$chroot" ] && err 'chroot already exists'

	echo "creating chroot..."
	mkdir -p "$chroot/rootfs"
	tar xzf "$image" -C "$chroot"
}

run() {
	chroot="$chroots/$1"; rootfs="$chroot/rootfs"; shift
	[ ! -d "$chroot" ] && err 'chroot does not exist'
	[ -f "$chroot/before-chroot" ] && ( cd "$chroot"; './before-chroot' "$@" )

	cp -L /etc/resolv.conf "$rootfs/etc/"
	mount --bind /dev "$rootfs/dev"
	mount -t devpts pts "$rootfs/dev/pts"
	mount -t sysfs sys "$rootfs/sys"
	mount -t proc proc "$rootfs/proc"

	if [ -f "$chroot/chroot" ]; then 
		touch "$rootfs/chroot" 
		mount --bind "$chroot/chroot" "$rootfs/chroot"
		mount -o remount,ro,bind "$rootfs/chroot"
		chroot "$rootfs" '/chroot' "$@"
		umount "$rootfs/chroot"
	elif [ "$#" -eq 0 ]; then chroot "$rootfs" 'sh' '-l'
	else chroot "$rootfs" "$@"; fi

	[ -f "$chroot/after-chroot" ] && ( cd "$chroot"; './after-chroot' "$@" )
	umount -l "$rootfs/proc" "$rootfs/sys" "$rootfs/dev/pts" "$rootfs/dev" 
}

chroots() { ls -1 "$chroots"; }
rmchroot() { for i in "$@"; do rm -rf "$chroots/$i"; done; }

_export() {
	chroot="$chroots/$1"; image="$images/${2:-export}.tar.gz"
	[ ! -d "$chroot" ] && err 'chroot does not exist'

	echo "exporting chroot..."
	tar czf "$image" -C "$chroot" .
}

[ 0 -ne `id -u` ] && err 'this script needs root access'
images="${CHROOTY_IMAGES:-/var/chrooty/images}"
chroots="${CHROOTY_CHROOTS:-/var/chrooty/chroots}"
mkdir -p "$chroots" "$images"

case "$1" in
	pull) shift; pull "$@" ;;
	images) images ;;
	rmimage) shift; rmimage "$@" ;;

	create) shift; create "$@" ;;
	run) shift; run "$@" ;;
	chroots) chroots ;;
	rmchroot) shift; rmchroot "$@" ;;
	export) shift; _export "$@" ;;

	*) help ;; 
esac
